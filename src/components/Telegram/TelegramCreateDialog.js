import _ from 'lodash'import React from 'react'import PropTypes from 'prop-types'import {compose} from 'recompose'import injectSheet from 'react-jss'import Dialog from 'material-ui/Dialog'import FlatButton from 'material-ui/FlatButton'import Loader from '../Loader'import {Field, reduxForm, SubmissionError} from 'redux-form'import toCamelCase from '../../helpers/toCamelCase'import {TextField, MarketSearchField} from '../ReduxForm'import CloseIcon from 'material-ui/svg-icons/navigation/close'import IconButton from 'material-ui/IconButton'import t from '../../helpers/translate'export const TELEGRAM_CREATE_DIALOG_OPEN = 'openCreateDialog'export const TELEGRAM_UPDATE_DIALOG_OPEN = 'openUpdateDialog'const validate = (data) => {    const errors = toCamelCase(data)    const nonFieldErrors = _.get(errors, 'nonFieldErrors')    const latLng = (_.get(errors, 'lat') || _.get(errors, 'lon')) && 'Location is required.'    throw new SubmissionError({        ...errors,        latLng,        _error: nonFieldErrors    })}const enhance = compose(    injectSheet({        loader: {            position: 'absolute',            width: '100%',            height: '100%',            background: '#fff',            top: '0',            left: '0',            alignItems: 'center',            zIndex: '999',            justifyContent: 'center',            display: ({loading}) => loading ? 'flex' : 'none'        },        popUp: {            color: '#333 !important',            overflow: 'unset !important',            fontSize: '13px !important',            position: 'relative',            padding: '0 !important',            height: '100%',            maxHeight: 'none !important',            marginBottom: '64px'        },        titleContent: {            background: '#fff',            color: '#333',            fontWeight: 'bold',            textTransform: 'uppercase',            display: 'flex',            justifyContent: 'space-between',            alignItems: 'center',            borderBottom: '1px solid #efefef',            padding: '0 10px 0 30px',            height: '60px',            zIndex: '999'        },        field: {            padding: '0 30px 20px'        },        inputFieldCustom: {            fontSize: '13px !important',            height: '45px !important',            marginTop: '7px',            '& div': {                fontSize: '13px !important'            },            '& label': {                top: '20px !important',                lineHeight: '5px !important'            },            '& input': {                marginTop: '0 !important'            }        },        contacts: {            background: '#f1f5f8',            color: '#333',            margin: '12px -30px 0',            padding: '20px 30px'        },        bottomButton: {            bottom: '0',            left: '0',            right: '0',            padding: '10px',            zIndex: '999',            borderTop: '1px solid #efefef',            background: '#fff',            textAlign: 'right',            '& span': {                fontSize: '13px !important',                fontWeight: '600 !important',                color: '#129fdd',                verticalAlign: 'inherit !important'            }        },        actionButton: {            fontSize: '13px !important',            margin: '0 !important'        }    }),    reduxForm({        form: 'TelegramCreateForm',        enableReinitialize: true    }))const TelegramCreateDialog = enhance((props) => {    const {open, loading, handleSubmit, onClose, classes} = props    const onSubmit = handleSubmit(() => props.onSubmit().catch(validate))    return (        <Dialog            modal={true}            open={open}            onRequestClose={onClose}            className={classes.dialog}            contentStyle={loading ? {width: '380px'} : {width: '400px'}}            bodyClassName={classes.popUp}>            <div className={classes.titleContent}>                <span>{t('Получить ключ')}</span>                <IconButton onTouchTap={onClose}>                    <CloseIcon color="#666666"/>                </IconButton>            </div>            <div className={classes.bodyContent}>                <form onSubmit={onSubmit} className={classes.form}>                    <div className={classes.loader}>                        <Loader size={0.75}/>                    </div>                    <div className={classes.inContent}>                        <div className={classes.field}>                            <Field                                name="market"                                component={MarketSearchField}                                className={classes.inputFieldCustom}                                label={t('Магазин')}                                fullWidth={true}/>                            <Field                                name="phone"                                component={TextField}                                className={classes.inputFieldCustom}                                label={t('Телефон')}                                fullWidth={true}/>                        </div>                    </div>                    <div className={classes.bottomButton}>                        <FlatButton                            label="Ок"                            className={classes.actionButton}                            primary={true}                            type="submit"                        />                    </div>                </form>            </div>        </Dialog>    )})TelegramCreateDialog.propTypes = {    isUpdate: PropTypes.bool,    open: PropTypes.bool.isRequired,    onClose: PropTypes.func.isRequired,    onSubmit: PropTypes.func.isRequired,    loading: PropTypes.bool.isRequired}TelegramCreateDialog.defaultProps = {    isUpdate: false}export default TelegramCreateDialog