import _ from 'lodash'import React from 'react'import PropTypes from 'prop-types'import {Row, Col} from 'react-flexbox-grid'import IconButton from 'material-ui/IconButton'import ModEditorIcon from 'material-ui/svg-icons/editor/mode-edit'import DeleteIcon from 'material-ui/svg-icons/action/delete'import * as ROUTES from '../../constants/routes'import GridList from '../GridList'import Container from '../Container'import DivisionCreateDialog from './DivisionCreateDialog'import ConfirmDialog from '../ConfirmDialog'import injectSheet from 'react-jss'import {compose} from 'recompose'import FlatButton from 'material-ui/FlatButton'import ContentAdd from 'material-ui/svg-icons/content/add'import SettingSideMenu from '../Settings/SettingsSideMenu'import ToolTip from '../ToolTip'import Edit from 'material-ui/svg-icons/image/edit'import t from '../../helpers/translate'const listHeader = [    {        sorting: true,        name: 'name',        xs: 10,        title: t('Наименование')    },    {        sorting: false,        xs: 2,        name: 'actions',        title: ''    }]const enhance = compose(    injectSheet({        addButton: {            '& svg': {                width: '14px !important',                height: '14px !important'            }        },        wrapper: {            display: 'flex',            margin: '0 -28px',            height: 'calc(100% + 28px)'        },        addButtonWrapper: {            height: '100%',            display: 'flex',            alignItems: 'center',            marginLeft: '-18px'        },        rightPanel: {            background: '#fff',            flexBasis: 'calc(100% - 225px)',            maxWidth: 'calc(100% - 225px)',            paddingTop: '10px',            overflowY: 'auto',            overflowX: 'hidden'        },        verticalButton: {            border: '2px #dfdfdf solid !important',            borderRadius: '50%',            opacity: '0',            '& > div': {                display: 'flex',                alignItems: 'center',                justifyContent: 'center'            }        },        listRow: {            margin: '0 -30px !important',            minHeight: '50px',            width: 'auto !important',            padding: '5px 30px',            '&:hover > div:last-child > div ': {                opacity: '1'            }        },        iconBtn: {            display: 'flex',            justifyContent: 'flex-end',            opacity: '0',            transition: 'all 200ms ease-out'        }    }))const iconStyle = {    icon: {        color: '#666',        width: 22,        height: 22    },    button: {        width: 30,        height: 25,        padding: 0    }}const DivisionGridList = enhance((props) => {    const {        filter,        createDialog,        updateDialog,        actionsDialog,        confirmDialog,        listData,        detailData,        classes    } = props    const actions = (        <div>            <IconButton onTouchTap={actionsDialog.handleActionEdit}>                <ModEditorIcon />            </IconButton>            <IconButton onTouchTap={actionsDialog.handleActionDelete}>                <DeleteIcon />            </IconButton>        </div>    )    const divisionDetail = (        <span>a</span>    )    const divisionList = _.map(_.get(listData, 'data'), (item) => {        const id = _.get(item, 'id')        const name = _.get(item, 'name')        return (            <Row key={id} className={classes.listRow}>                <Col xs={10}>{name}</Col>                <Col xs={2}>                    <div className={classes.iconBtn}>                        <ToolTip position="bottom" text={t('Изменить')}>                            <IconButton                                iconStyle={iconStyle.icon}                                style={iconStyle.button}                                disableTouchRipple={true}                                touch={true}                                onTouchTap={() => { updateDialog.handleOpenUpdateDialog(id) }}>                                <Edit />                            </IconButton>                        </ToolTip>                        <ToolTip position="bottom" text={t('Удалить')}>                            <IconButton                                disableTouchRipple={true}                                iconStyle={iconStyle.icon}                                style={iconStyle.button}                                onTouchTap={() => { confirmDialog.handleOpenConfirmDialog(id) }}                                touch={true}>                                <DeleteIcon />                            </IconButton>                        </ToolTip>                    </div>                </Col>            </Row>        )    })    const list = {        header: listHeader,        list: divisionList,        loading: _.get(listData, 'listLoading')    }    const addButton = (        <div className={classes.addButtonWrapper}>            <FlatButton                backgroundColor="#fff"                labelStyle={{textTransform: 'none', paddingLeft: '2px', color: '#12aaeb', fontSize: '13px'}}                className={classes.addButton}                label={t('добавить организацию')}                onTouchTap={createDialog.handleOpenCreateDialog}                icon={<ContentAdd color="#12aaeb"/>}>            </FlatButton>        </div>    )    return (        <Container>            <div className={classes.wrapper}>                <SettingSideMenu currentUrl={ROUTES.DIVISION_LIST_URL}/>                <div className={classes.rightPanel}>                    <GridList                        filter={filter}                        list={list}                        detail={divisionDetail}                        actionsDialog={actions}                        addButton={addButton}                        listShadow={false}                        flexibleRow={true}                    />                </div>            </div>            <DivisionCreateDialog                initialValues={{}}                open={createDialog.openCreateDialog}                loading={createDialog.createLoading}                onClose={createDialog.handleCloseCreateDialog}                onSubmit={createDialog.handleSubmitCreateDialog}            />            <DivisionCreateDialog                isUpdate={true}                initialValues={updateDialog.initialValues}                open={updateDialog.openUpdateDialog}                loading={updateDialog.updateLoading}                onClose={updateDialog.handleCloseUpdateDialog}                onSubmit={updateDialog.handleSubmitUpdateDialog}            />            {detailData.data && <ConfirmDialog                type="delete"                message={_.get(detailData, ['data', 'name'])}                loading={confirmDialog.confirmLoading}                onClose={confirmDialog.handleCloseConfirmDialog}                onSubmit={confirmDialog.handleSendConfirmDialog}                open={confirmDialog.openConfirmDialog}            />}        </Container>    )})DivisionGridList.propTypes = {    filter: PropTypes.object.isRequired,    listData: PropTypes.object,    detailData: PropTypes.object,    createDialog: PropTypes.shape({        createLoading: PropTypes.bool.isRequired,        openCreateDialog: PropTypes.bool.isRequired,        handleOpenCreateDialog: PropTypes.func.isRequired,        handleCloseCreateDialog: PropTypes.func.isRequired,        handleSubmitCreateDialog: PropTypes.func.isRequired    }).isRequired,    confirmDialog: PropTypes.shape({        confirmLoading: PropTypes.bool.isRequired,        openConfirmDialog: PropTypes.bool.isRequired,        handleOpenConfirmDialog: PropTypes.func.isRequired,        handleCloseConfirmDialog: PropTypes.func.isRequired,        handleSendConfirmDialog: PropTypes.func.isRequired    }).isRequired,    updateDialog: PropTypes.shape({        updateLoading: PropTypes.bool.isRequired,        openUpdateDialog: PropTypes.bool.isRequired,        handleOpenUpdateDialog: PropTypes.func.isRequired,        handleCloseUpdateDialog: PropTypes.func.isRequired,        handleSubmitUpdateDialog: PropTypes.func.isRequired    }).isRequired,    actionsDialog: PropTypes.shape({        handleActionEdit: PropTypes.func.isRequired,        handleActionDelete: PropTypes.func.isRequired    }).isRequired}export default DivisionGridList