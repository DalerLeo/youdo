import React from 'react'import _ from 'lodash'import sprintf from 'sprintf'import {connect} from 'react-redux'import {reset} from 'redux-form'import {hashHistory} from 'react-router'import Layout from '../../components/Layout'import {compose, withPropsOnChange, withHandlers} from 'recompose'import * as ROUTER from '../../constants/routes'import filterHelper from '../../helpers/filter'import toBoolean from '../../helpers/toBoolean'import {    PRICE_LIST_SETTING_CREATE_DIALOG_OPEN,    PRICE_LIST_SETTING_UPDATE_DIALOG_OPEN,    PRICE_LIST_SETTING_DELETE_DIALOG_OPEN,    PriceListSettingGridList} from '../../components/PriceListSetting'import {    priceListSettingCreateAction,    priceListSettingUpdateAction,    priceListSettingListFetchAction,    priceListSettingDeleteAction,    priceListSettingItemFetchAction} from '../../actions/priceListSetting'import {openErrorAction} from '../../actions/error'import {openSnackbarAction} from '../../actions/snackbar'import t from '../../helpers/translate'const enhance = compose(    connect((state, props) => {        const query = _.get(props, ['location', 'query'])        const pathname = _.get(props, ['location', 'pathname'])        const detail = _.get(state, ['priceListSetting', 'item', 'data'])        const detailLoading = _.get(state, ['priceListSetting', 'item', 'loading'])        const createLoading = _.get(state, ['priceListSetting', 'create', 'loading'])        const updateLoading = _.get(state, ['priceListSetting', 'update', 'loading'])        const list = _.get(state, ['priceListSetting', 'list', 'data'])        const listLoading = _.get(state, ['priceListSetting', 'list', 'loading'])        const createForm = _.get(state, ['form', 'PriceListSettingCreateForm'])        const filter = filterHelper(list, pathname, query)        return {            list,            listLoading,            detail,            detailLoading,            createLoading,            updateLoading,            filter,            createForm        }    }),    withPropsOnChange((props, nextProps) => {        return props.list && props.filter.filterRequest() !== nextProps.filter.filterRequest()    }, ({dispatch, filter}) => {        dispatch(priceListSettingListFetchAction(filter))    }),    withPropsOnChange((props, nextProps) => {        const priceListSettingId = _.get(nextProps, ['params', 'priceListSettingId'])        return priceListSettingId && _.get(props, ['params', 'priceListSettingId']) !== priceListSettingId    }, ({dispatch, params}) => {        const priceListSettingId = _.toInteger(_.get(params, 'priceListSettingId'))        priceListSettingId && dispatch(priceListSettingItemFetchAction(priceListSettingId))    }),    withHandlers({        handleActionEdit: props => () => {            return null        },        handleOpenDeleteDialog: props => () => {            return null        },        handleOpenConfirmDialog: props => (id) => {            const {filter} = props            hashHistory.push({                pathname: sprintf(ROUTER.PRICE_LIST_SETTING_ITEM_PATH, id),                query: filter.getParams({[PRICE_LIST_SETTING_DELETE_DIALOG_OPEN]: true})            })        },        handleCloseConfirmDialog: props => () => {            const {location: {pathname}, filter} = props            hashHistory.push({pathname, query: filter.getParams({[PRICE_LIST_SETTING_DELETE_DIALOG_OPEN]: false})})        },        handleSendConfirmDialog: props => () => {            const {dispatch, detail, filter, location: {pathname}} = props            dispatch(priceListSettingDeleteAction(detail.id))                .then(() => {                    hashHistory.push({pathname, query: filter.getParams({[PRICE_LIST_SETTING_DELETE_DIALOG_OPEN]: false})})                    dispatch(priceListSettingListFetchAction(filter))                    return dispatch(openSnackbarAction({message: t('Успешно удалено')}))                })                .catch(() => {                    return dispatch(openSnackbarAction({message: t('Удаление невозможно из-за связи с другими данными')}))                })        },        handleOpenCreateDialog: props => () => {            const {dispatch, location: {pathname}, filter} = props            hashHistory.push({pathname, query: filter.getParams({[PRICE_LIST_SETTING_CREATE_DIALOG_OPEN]: true})})            dispatch(reset('PriceListSettingCreateForm'))        },        handleCloseCreateDialog: props => () => {            const {location: {pathname}, filter} = props            hashHistory.push({pathname, query: filter.getParams({[PRICE_LIST_SETTING_CREATE_DIALOG_OPEN]: false})})        },        handleSubmitCreateDialog: props => () => {            const {dispatch, createForm, filter, location: {pathname}} = props            return dispatch(priceListSettingCreateAction(_.get(createForm, ['values'])))                .then(() => {                    return dispatch(openSnackbarAction({message: t('Успешно сохранено')}))                })                .then(() => {                    hashHistory.push({pathname, query: filter.getParams({[PRICE_LIST_SETTING_CREATE_DIALOG_OPEN]: false})})                    dispatch(priceListSettingListFetchAction(filter))                })                .catch((error) => {                    dispatch(openErrorAction({                        message: error                    }))                })        },        handleOpenUpdateDialog: props => (id) => {            const {filter} = props            hashHistory.push({                pathname: sprintf(ROUTER.PRICE_LIST_SETTING_ITEM_PATH, id),                query: filter.getParams({[PRICE_LIST_SETTING_UPDATE_DIALOG_OPEN]: true})            })        },        handleCloseUpdateDialog: props => () => {            const {location: {pathname}, filter} = props            hashHistory.push({pathname, query: filter.getParams({[PRICE_LIST_SETTING_UPDATE_DIALOG_OPEN]: false})})        },        handleSubmitUpdateDialog: props => () => {            const {dispatch, createForm, filter} = props            const priceListSettingId = _.toInteger(_.get(props, ['params', 'priceListSettingId']))            return dispatch(priceListSettingUpdateAction(priceListSettingId, _.get(createForm, ['values'])))                .then(() => {                    return dispatch(openSnackbarAction({message: t('Успешно сохранено')}))                })                .then(() => {                    hashHistory.push(filter.createURL({[PRICE_LIST_SETTING_UPDATE_DIALOG_OPEN]: false}))                    dispatch(priceListSettingListFetchAction(filter))                })                .catch((error) => {                    dispatch(openErrorAction({                        message: error                    }))                })        }    }))const PriceListSetting = enhance((props) => {    const {        location,        list,        listLoading,        detail,        detailLoading,        createLoading,        updateLoading,        filter,        layout,        params    } = props    const openCreateDialog = toBoolean(_.get(location, ['query', PRICE_LIST_SETTING_CREATE_DIALOG_OPEN]))    const openUpdateDialog = toBoolean(_.get(location, ['query', PRICE_LIST_SETTING_UPDATE_DIALOG_OPEN]))    const openConfirmDialog = toBoolean(_.get(location, ['query', PRICE_LIST_SETTING_DELETE_DIALOG_OPEN]))    const detailId = _.toInteger(_.get(params, 'priceListSettingId'))    const actionsDialog = {        handleActionEdit: props.handleActionEdit,        handleActionDelete: props.handleOpenDeleteDialog    }    const createDialog = {        createLoading,        openCreateDialog,        handleOpenCreateDialog: props.handleOpenCreateDialog,        handleCloseCreateDialog: props.handleCloseCreateDialog,        handleSubmitCreateDialog: props.handleSubmitCreateDialog    }    const confirmDialog = {        confirmLoading: detailLoading,        openConfirmDialog: openConfirmDialog,        handleOpenConfirmDialog: props.handleOpenConfirmDialog,        handleCloseConfirmDialog: props.handleCloseConfirmDialog,        handleSendConfirmDialog: props.handleSendConfirmDialog    }    const updateDialog = {        initialValues: (() => {            if (!detail || openCreateDialog) {                return {}            }            return {                name: _.get(detail, 'name')            }        })(),        updateLoading: detailLoading || updateLoading,        openUpdateDialog,        handleOpenUpdateDialog: props.handleOpenUpdateDialog,        handleCloseUpdateDialog: props.handleCloseUpdateDialog,        handleSubmitUpdateDialog: props.handleSubmitUpdateDialog    }    const listData = {        data: _.get(list, 'results'),        listLoading    }    const detailData = {        id: detailId,        data: detail,        detailLoading    }    return (        <Layout {...layout}>            <PriceListSettingGridList                filter={filter}                listData={listData}                detailData={detailData}                createDialog={createDialog}                confirmDialog={confirmDialog}                updateDialog={updateDialog}                actionsDialog={actionsDialog}            />        </Layout>    )})export default PriceListSetting