import _ from 'lodash'import sprintf from 'sprintf'import axios from '../helpers/axios'import * as API from '../constants/api'import * as actionTypes from '../constants/actionTypes'import * as serializers from '../serializers/measurementSerializer'export const measurementCreateAction = (formValues) => {    const requestData = serializers.createSerializer(formValues)    const payload = axios()        .post(API.MEASUREMENT_CREATE, requestData)        .then((response) => {            return _.get(response, 'data')        })        .catch((error) => {            return Promise.reject(_.get(error, ['response', 'data']))        })    return {        type: actionTypes.MEASUREMENT_CREATE,        payload    }}export const measurementDeleteAction = (id) => {    const payload = axios()        .delete(sprintf(API.MEASUREMENT_DELETE, id))        .then((response) => {            return _.get(response, 'data')        })        .catch((error) => {            return Promise.reject(_.get(error, ['response', 'data']))        })    return {        type: actionTypes.MEASUREMENT_DELETE,        payload    }}export const measurementUpdateAction = (id, formValues) => {    const requestData = serializers.createSerializer(formValues)    const payload = axios()        .put(sprintf(API.MEASUREMENT_ITEM, id), requestData)        .then((response) => {            return _.get(response, 'data')        })        .catch((error) => {            return Promise.reject(_.get(error, ['response', 'data']))        })    return {        type: actionTypes.MEASUREMENT_UPDATE,        payload    }}export const measurementListFetchAction = (filter, id) => {    const params = serializers.listFilterSerializer(filter.getParams(), id)    const payload = axios()        .get(API.MEASUREMENT_H_LIST, {params})        .then((response) => {            return _.get(response, 'data')        })        .catch((error) => {            return Promise.reject(_.get(error, ['response', 'data']))        })    return {        type: actionTypes.MEASUREMENT_H_LIST,        payload    }}export const measurementItemFetchAction = (id) => {    const payload = axios()        .get(sprintf(API.MEASUREMENT_ITEM, id))        .then((response) => {            return _.get(response, 'data')        })        .catch((error) => {            return Promise.reject(_.get(error, ['response', 'data']))        })    return {        type: actionTypes.MEASUREMENT_ITEM,        payload    }}